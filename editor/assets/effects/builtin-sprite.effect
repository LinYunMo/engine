// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if SAMPLE_FROM_RT
    #include <common>
  #endif

  #define PI2 6.28318530718

  in vec3 a_position;
  in vec2 a_texCoord;
  in float a_batch_id;

  out vec2 uv0;
  out vec4 color;

  out float uvMode;
  out vec4 uvSizeOffset;
  out vec4 uvParams0;
  out vec4 uvParams1;

  struct UILocalData {
    vec4 rotation;
    vec3 translation;
    vec3 scale;

    vec4 color;
    vec4 uvSizeOffset;

    float uvMode;
    vec4 uvParams;
    float filltype;
  };

  /////////////////////////////////////////////////////////

  // 这儿的数量不包装的话，就会被打散//那就对 5 取整
  #define CC_UI_VECTOR_PER_DRAW (CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS - CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS) / 5 * 5 //(需要对5取整因为边界条件)
  // #define CC_UI_VECTOR_PER_DRAW 16 * 5 // 调试用 16

  #pragma builtin(local)
  layout(set = 2, binding = 0) uniform CCUILocal {
    // xyz: translation w: color R.G
    // xyzw: quat rotation
    // xy: scale z: color B.A w: uvMode.filltype
    // xy: uv size zw: uv offset
    // (xyzw: sliced - left, top, right, bottom) | (xy: tiling) | (xyzw: start, end, mode, center)
    vec4 cc_local_data[CC_UI_VECTOR_PER_DRAW];
  };

  void CCGetUILocalData(out UILocalData o) {
    vec4 data0 = cc_local_data[int(a_batch_id) * 5];
    vec4 data1 = cc_local_data[int(a_batch_id) * 5 + 1];
    vec4 data2 = cc_local_data[int(a_batch_id) * 5 + 2];
    vec4 data3 = cc_local_data[int(a_batch_id) * 5 + 3];
    vec4 data4 = cc_local_data[int(a_batch_id) * 5 + 4];

    float rg = data0.w;
    float r = floor(rg);
    float ba = data2.z;
    float b = floor(ba);

    o.rotation = data1;
    o.translation = data0.xyz;
    o.scale = vec3(data2.xy, 1.0);

    o.color = vec4(r * (1.0 / 255.0), rg - r, b * (1.0 / 255.0), ba - b);
    o.uvSizeOffset = data3;
    o.filltype = fract(data2.w) * 10.0;

    o.uvMode = data2.w;
    o.uvParams = data4;
  }

  /////////////////////////////////////////////////////////

  vec3 VectorTransformQuat (vec3 v, vec4 Q) {
    return v + 2.0 * cross(Q.xyz, cross(Q.xyz, v) + Q.w * v);
  }

  vec4 vert () {
    UILocalData i;
    CCGetUILocalData(i);

    vec4 pos = vec4(VectorTransformQuat(a_position * i.scale, i.rotation) + i.translation, 1.0);

    if (i.uvMode >= 3.0) {
      uv0 = a_texCoord;
      uvSizeOffset = i.uvSizeOffset;
      uvParams0 = vec4(i.uvParams.xy, i.filltype, 0); // HORIZONTAL OK
      if (i.filltype >= 2.0) { // 针对 RADIAL 处理
        uvParams1 = vec4(i.uvParams.zw, 0, 0); // center x y
        // uvParams0 = vec4(1.0 - uvParams0.y, 1.0 - uvParams0.x, uvParams0.zw); // 逆时针变顺时针 // 起点终点转换 // 这样吧，规定为 从 0.X 到 0.Y
        // 这里其实就可以算分段的数据了
        // 起点排除来进行跨域判断 （处理到都为 0-1 的）
        float start = 1.0 - uvParams0.x; // 顺逆时针变换 
        float range = uvParams0.y; // [-1,1] //决定终点的方向 // 这儿可以用 1 直接进行优化，两个点实际可以直接填
        float end = start - range;
        if (range > 0.0 && end < 0.0) {
          end = 1.0 + end;
          start = 1.0 + start;
        }
        if (start >= end) {
          float temp = start;
          start = end;
          end = temp;
        }

        uvParams1.z = tan(start * PI2); // 开始的值
        uvParams1.w = tan(end * PI2); // 结束的值
        if (start <= 0.25) {
          if (end <= 0.25) { // 同为 1 区间
            // 不跨象限
            uvParams0.w = 1.01;
          } else if (end <= 0.5) { // 跨 12
            uvParams0.w = 1.11;
          } else if (end <= 0.75) { // 跨 123
            uvParams0.w = 1.21;
          } else if (end <= 1.0) { // 跨 1234
            uvParams0.w = 1.31;
          } else { // 跨 1234 且跨回 1
            uvParams0.w = 1.41;
          }
        } else if (start <= 0.5) {
          if (end <= 0.5) {
            uvParams0.w = 2.01;
          } else if (end <= 0.75) {
            uvParams0.w = 2.11;
          } else if (end <= 1.0) {
            uvParams0.w = 2.21;
          } else if (end <= 1.25) {
            uvParams0.w = 2.31;
          } else {
            uvParams0.w = 2.41;
          }
        } else if (start <= 0.75) {
          if (end <= 0.75) {
            uvParams0.w = 3.01;
          } else if (end <= 1.0) {
            uvParams0.w = 3.11;
          } else if (end <= 1.25) {
            uvParams0.w = 3.21;
          } else if (end < 1.5) {
            uvParams0.w = 3.31;
          } else {
            uvParams0.w = 3.41;
          }
        } else {
          if (end <= 1.0) {
            uvParams0.w = 4.01;
          } else if (end <= 1.25) {
            uvParams0.w = 4.11;
          } else if (end <= 1.5) {
            uvParams0.w = 4.21;
          } else if (end < 1.75) {
            uvParams0.w = 4.31;
          } else {
            uvParams0.w = 4.41;
          }
        }
      }else if (i.filltype >= 1.0) {
        // 由于 y 坐标翻转所需要的翻转
        uvParams0 = vec4(1.0 - uvParams0.y, 1.0 - uvParams0.x, uvParams0.zw);
      }
    } else if (i.uvMode >= 2.0) {
      uv0 = a_texCoord * i.uvParams.xy;
      uv0.y -= fract(i.uvParams.y); // 平移 一点 // 为了解决绘制起点的问题
      uvSizeOffset = i.uvSizeOffset;
    } else if (i.uvMode >= 1.0) {
      uv0 = a_texCoord;
      uvSizeOffset = i.uvSizeOffset;
      vec4 params0 = fract(i.uvParams); // sprite 的 中间四个点的数据 // 和 Rect 相关 // LTRB
      vec4 params1 = floor(i.uvParams) / 2048.0; // uvSilced 0-1 // 和图直接相关 // LTRB // 整数位
      uvParams0 = vec4(params0.xy, params1.xy); // 重新整合了 // SL ST TL TT
      uvParams1 = vec4(params0.zw, params1.zw); // 重新整合了 // SR SB TR TB
    } else {
      uv0 = a_texCoord * i.uvSizeOffset.xy + i.uvSizeOffset.zw;
    }

    uvMode = i.uvMode;
    color = i.color;

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  // 一大一小，就是一个是正无穷一个是负无穷
  // 其实是个常数，可以传进来，避免计算 
  #define PIHB 1.5707963267950 // 大一点点点
  #define PIHS 1.569 // 小一点点点 // 看情况能不能去掉

  in vec2 uv0;
  in vec4 color;

  in float uvMode;
  in vec4 uvSizeOffset;
  in vec4 uvParams0;
  in vec4 uvParams1;

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  vec2 evalSlicedUV(vec2 uv) {
    // 一定要清楚这个两点实际上是决定要取用哪个点，其信息是由点本身决定的，其数据决定是由采样点和变更的边界条件决定的
    // 所以实际上比较的坐标为 xyxy 比较
    // p0 的前两位为 Sprite 中的变更点，后两位为 uv 中的变更点
    vec4 p0 = mix(vec4(0.0), uvParams0, step(uvParams0.xyxy, uv.xyxy)); // 使用了mix 其实为三目运算，非前即后    
         p0 = mix(       p0, uvParams1, step(uvParams1.xyxy, uv.xyxy)); // 逐渐逼近
    vec4 p1 = mix(vec4(1.0), uvParams1, step(uv.xyxy, uvParams1.xyxy));
         p1 = mix(       p1, uvParams0, step(uv.xyxy, uvParams0.xyxy));

    // 决定了线段的两点 P0 为起点，P1 为终点
    // 两点式转一般式
    // 找到 sprite 上的点对应的 sliced UV 的坐标
    // sprite  的点是 X ，UV 上的点是 Y
    vec2 k = (p1.zw - p0.zw) / (p1.xy - p0.xy); 
    vec2 b = (p1.xy * p0.zw - p0.xy * p1.zw) / (p1.xy - p0.xy);

    return k * uv + b;
  }

  float evalFilledUV(vec2 uv, float mode, vec2 center) {
    float alpha = 1.0;
    if (mode >= 2.0) {
      // RADIAL
      float range = uvParams0.y - uvParams0.x;
      float value = (uv.y - center.y) / (uv.x - center.x);
      float type = uvParams0.w;
      float s = floor(type);
      float e = fract(type);
      if (s >= 4.0) {
        if (e > 0.4) {
          if (uv.y > center.y || uv.x < center.x || (value > uvParams1.z && value < 0.0) || (value < uvParams1.w && value > tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.3) {
          if (uv.y > center.y || (value > uvParams1.z && value < 0.0) || (value < uvParams1.w && value > 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.2) {
          if ((uv.x >= center.x && uv.y >= center.y) || 
          ((uv.x > center.x) && value > uvParams1.z && value < 0.0) || 
          ((uv.x < center.x) && value < uvParams1.w && value >= tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.1) {
          if (uv.x < center.x) {
            alpha = 0.0;
            return alpha;
          }
          if ((value > uvParams1.z && value <= 0.0) || (value < uvParams1.w && value >= 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else {
          if (uv.y > center.y) {
            alpha = 0.0;
            return alpha;
          }
          if (value > uvParams1.z && value < uvParams1.w) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        }
      } else if (s >= 3.0) {
        if (e > 0.4) {
          if (uv.x >= center.x || uv.y >= center.y || value > uvParams1.z && value < tan(PIHS) || value < uvParams1.w && value >= 0.0) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.3) {
          if (uv.x >= center.x || value > uvParams1.z && value < tan(PIHS) || value < uvParams1.w && value >= tan(PIHB)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.2) {
          if ((uv.x >= center.x && uv.y <= center.y) || 
          ((uv.y < center.y) && value > uvParams1.z && value < tan(PIHS)) || 
          ((uv.x > center.x) && value < uvParams1.w && value > 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.1) {
          if (uv.y > center.y) {
            alpha = 0.0;
            return alpha;
          }
          if ((value > uvParams1.z && value <= tan(PIHS)) || (value < uvParams1.w && value >= tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else {
          if (uv.x > center.x) {
            alpha = 0.0;
            return alpha;
          }
          if (value > uvParams1.z && value < uvParams1.w) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        }
      } else if (s >= 2.0) {
        if (e > 0.4) {
          if (uv.y < center.y || uv.x > center.x || (value > uvParams1.z && value < 0.0) || (value < uvParams1.w && value > tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.3) {
          if (uv.y < center.y || (value > uvParams1.z && value < 0.0) || (value < uvParams1.w && value > 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.2) {
          if ((uv.x <= center.x && uv.y <= center.y) || 
          ((uv.x < center.x) && value > uvParams1.z && value < 0.0) || 
          ((uv.x > center.x) && value < uvParams1.w && value >= tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.1) {
          if (uv.x > center.x) {
            alpha = 0.0;
            return alpha;
          }
          if ((value > uvParams1.z && value < 0.0) || (value < uvParams1.w && value >= 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else {
          if (uv.y < center.y) {
            alpha = 0.0;
            return alpha;
          }
          if (value > uvParams1.z && value < uvParams1.w) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        }
      } else if (s >= 1.0) {
        if (e > 0.4) {
          if ((uv.x <= center.x) || (uv.y <= center.y) || (value > uvParams1.z && value <= tan(PIHS)) || value < uvParams1.w && value >= 0.0) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.3) {
          // 刚好有重叠，可以不加条件
          if ((uv.x <= center.x) || (value > uvParams1.z && value <= tan(PIHS)) || (value < uvParams1.w && value >= tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.2) {
          if ((uv.x <= center.x && uv.y >= center.y) || 
          ((uv.y >= center.y) && value > uvParams1.z && value <= tan(PIHS)) || 
          ((uv.y <= center.y) && value < uvParams1.w && value >= 0.0)) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else if (e > 0.1) {
          if (uv.y < center.y) {
            alpha = 0.0;
            return alpha;
          }
          // tan（PI/2）有个微妙的精度问题
          if ((value > uvParams1.z && value <= tan(PIHS)) || (value < uvParams1.w && value >= tan(PIHB))) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        } else {
          if (uv.y < center.y) {
            alpha = 0.0;
            return alpha;
          }
          if (value > uvParams1.z && value < uvParams1.w) {
            alpha = 1.0;
          } else {
            alpha = 0.0;
          }
        }
      }
    } else if (mode >= 1.0) {
      // VERTICAL
      if (uv.y >= uvParams0.x && uv.y <= uvParams0.y) {
        alpha = 1.0;
      } else {
        alpha = 0.0;
      }
    } else {
      // HORIZONTAL
      if (uv.x >= uvParams0.x && uv.x <= uvParams0.y) {
        alpha = 1.0;
      } else {
        alpha = 0.0;
      }
    }
    return alpha;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = uv0;

      if(uvMode >= 3.0) {
        // Do Nothing
      } else if (uvMode >= 2.0) {
        uv = fract(uv0) * uvSizeOffset.xy + uvSizeOffset.zw;
      } else if (uvMode >= 1.0) {
        uv = evalSlicedUV(uv0) * uvSizeOffset.xy + uvSizeOffset.zw;
      }

      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
      if (uvMode >= 3.0) {
        o.a *= evalFilledUV(uv0, uvParams0.z, uvParams1.xy);
      }
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
