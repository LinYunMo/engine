// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if SAMPLE_FROM_RT
    #include <common>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in float a_batch_id;

  out vec2 uv0;
  out vec4 color;

  out float uvMode;
  out vec4 uvSizeOffset;
  out vec4 uvParams0;
  out vec4 uvParams1;

  struct UILocalData {
    vec4 rotation;
    vec3 translation;
    vec3 scale;

    vec4 color;
    vec4 uvSizeOffset;

    float uvMode;
    vec4 uvParams;
    float progress;
  };

  /////////////////////////////////////////////////////////

  // 这儿的数量不包装的话，就会被打散//那就对 5 取整
  #define CC_UI_VECTOR_PER_DRAW (CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS - CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS) / 5 * 5 //(需要对5取整因为边界条件)
  // #define CC_UI_VECTOR_PER_DRAW 16 * 5 // 调试用 16

  #pragma builtin(local)
  layout(set = 2, binding = 0) uniform CCUILocal {
    // xyz: translation w: color R.G
    // xyzw: quat rotation
    // xy: scale z: color B.A w: uvMode.progress
    // xy: uv size zw: uv offset
    // (xyzw: sliced - left, top, right, bottom) | (xy: tiling)
    vec4 cc_local_data[CC_UI_VECTOR_PER_DRAW];
  };

  void CCGetUILocalData(out UILocalData o) {
    vec4 data0 = cc_local_data[int(a_batch_id) * 5];
    vec4 data1 = cc_local_data[int(a_batch_id) * 5 + 1];
    vec4 data2 = cc_local_data[int(a_batch_id) * 5 + 2];
    vec4 data3 = cc_local_data[int(a_batch_id) * 5 + 3];
    vec4 data4 = cc_local_data[int(a_batch_id) * 5 + 4];

    float rg = data0.w;
    float r = floor(rg);
    float ba = data2.z;
    float b = floor(ba);

    o.rotation = data1;
    o.translation = data0.xyz;
    o.scale = vec3(data2.xy, 1.0);

    o.color = vec4(r * (1.0 / 255.0), rg - r, b * (1.0 / 255.0), ba - b);
    o.uvSizeOffset = data3;
    o.progress = fract(data2.w);

    o.uvMode = data2.w;
    o.uvParams = data4;
  }

  /////////////////////////////////////////////////////////

  vec3 VectorTransformQuat (vec3 v, vec4 Q) {
    return v + 2.0 * cross(Q.xyz, cross(Q.xyz, v) + Q.w * v);
  }

  vec4 vert () {
    UILocalData i;
    CCGetUILocalData(i);

    vec4 pos = vec4(VectorTransformQuat(a_position * i.scale, i.rotation) + i.translation, 1.0);

    if (i.uvMode >= 2.0) {
      uv0 = a_texCoord * i.uvParams.xy;
      uv0.y -= fract(i.uvParams.y); // 平移 一点
      uvSizeOffset = i.uvSizeOffset;
    } else if (i.uvMode >= 1.0) {
      uv0 = a_texCoord;
      uvSizeOffset = i.uvSizeOffset;
      vec4 params0 = fract(i.uvParams); // sprite 的 中间四个点的数据 // 和 Rect 相关 // LTRB
      vec4 params1 = floor(i.uvParams) / 2048.0; // uvSilced 0-1 // 和图直接相关 // LTRB // 整数位
      uvParams0 = vec4(params0.xy, params1.xy); // 重新整合了 // SL ST TL TT
      uvParams1 = vec4(params0.zw, params1.zw); // 重新整合了 // SR SB TR TB
    } else {
      uv0 = a_texCoord * i.uvSizeOffset.xy + i.uvSizeOffset.zw;
    }

    uvMode = i.uvMode;
    color = i.color;

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec2 uv0;
  in vec4 color;

  in float uvMode;
  in vec4 uvSizeOffset;
  in vec4 uvParams0;
  in vec4 uvParams1;

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  vec2 evalSlicedUV(vec2 uv) {
    vec4 p0 = mix(vec4(0.0), uvParams0, step(uvParams0.xxyy, uv.xxyy)); // 使用了mix 其实为三目运算，非前即后
         p0 = mix(       p0, uvParams1, step(uvParams1.xxyy, uv.xxyy)); // 逐渐逼近
    vec4 p1 = mix(vec4(1.0), uvParams1, step(uv.xxyy, uvParams1.xxyy));
         p1 = mix(       p1, uvParams0, step(uv.xxyy, uvParams0.xxyy));

    // 决定了线段的两点 P0 为起点，P1 为终点
    // 两点式转一般式
    // 找到 sprite 上的点对应的 sliced UV 的坐标
    // sprite  的点是 X ，UV 上的点是 Y
    vec2 k = (p1.zw - p0.zw) / (p1.xy - p0.xy); 
    vec2 b = (p1.xy * p0.zw - p0.xy * p1.zw) / (p1.xy - p0.xy);

    return k * uv + b;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = uv0;

      if (uvMode >= 2.0) {
        uv = fract(uv0) * uvSizeOffset.xy + uvSizeOffset.zw;
      } else if (uvMode >= 1.0) {
        uv = evalSlicedUV(uv0) * uvSizeOffset.xy + uvSizeOffset.zw;
      }

      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
